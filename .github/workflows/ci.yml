name: CI - Test Runner

# Trigger workflow on push to main or PRs
on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  bootcamp-ci:
    name: CI-Bootcamp
    runs-on: ubuntu-latest

    env:
      app_name: BootcampDebug

    steps:
      # 1Ô∏è‚É£ Checkout repo
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      # 2Ô∏è‚É£ Clear Gradle cache
      - name: Remove current gradle cache
        run: rm -rf ~/.gradle

      # 3Ô∏è‚É£ Enable KVM permissions (for emulator)
      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      # 4Ô∏è‚É£ Setup JDK
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      # 5Ô∏è‚É£ Cache Gradle
      - name: Retrieve gradle cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      # 6Ô∏è‚É£ Load google-services.json and local.properties from secrets
      - name: Decode secrets
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
          LOCAL_PROPERTIES: ${{ secrets.LOCAL_PROPERTIES }}
        run: |
          if [ -n "$GOOGLE_SERVICES" ]; then
            echo "$GOOGLE_SERVICES" | base64 --decode > ./app/google-services.json
          else
            echo "::warning::GOOGLE_SERVICES secret is not set."
          fi
          if [ -n "$LOCAL_PROPERTIES" ]; then
            echo "$LOCAL_PROPERTIES" | base64 --decode > ./local.properties
          else
            echo "::warning::LOCAL_PROPERTIES secret is not set."
          fi

      # 7Ô∏è‚É£ Make gradlew executable
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 8Ô∏è‚É£ Setup NodeJS
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 22

      # 9Ô∏è‚É£ Install Firebase CLI
      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      # üîü Firestore Security Rules tests
      - name: Firestore Security Rules tests
        run: |
          if [ ! -e "firebase.json" ]; then
            echo "(B2 Warning): 'firebase.json' file is missing."
            exit 0
          fi
          jq -e '.emulators' firebase.json >/dev/null || { echo "'firebase.json' missing 'emulators'."; exit 1; }
          for e in auth firestore; do
            jq -e ".emulators.$e" firebase.json >/dev/null || { echo "'firebase.json' missing 'emulators.$e'."; exit 1; }
          done
          if [ -e "firebase/firestore/firestore.rules" ]; then
            jq -e '.firestore.rules' firebase.json >/dev/null || { echo "'firebase.json' missing 'firestore.rules'."; exit 1; }
            (cd firebase/firestore/test 2>/dev/null && npm install && npm test) || exit $?
          else
            echo "(B3 Warning): Firestore rules file not found."
          fi

      # 11Ô∏è‚É£ Kotlin formatting check
      - name: KTFmt Check
        run: ./gradlew ktfmtCheck

      # 12Ô∏è‚É£ Assemble Release APK
      - name: Assemble Release APK
        run: ./gradlew assembleRelease --parallel --build-cache

      # 13Ô∏è‚É£ Run tests
      - name: Run tests
        run: ./gradlew check --parallel --build-cache

      # 14Ô∏è‚É£ Sign APK with release keystore
      - name: Sign APK
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        run: |
          echo "$KEYSTORE_BASE64" | base64 --decode > release.keystore
          jarsigner -verbose \
            -keystore release.keystore \
            -storepass "$KEYSTORE_PASSWORD" \
            -keypass "$KEY_PASSWORD" \
            app/build/outputs/apk/release/app-release-unsigned.apk "$KEY_ALIAS"
          # Rename for upload
          mv app/build/outputs/apk/release/app-release-unsigned.apk app/build/outputs/apk/release/app-release.apk

      # 15Ô∏è‚É£ Upload signed APK as artifact
      - name: Upload Signed APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release
          path: app/build/outputs/apk/release/app-release.apk

      # 16Ô∏è‚É£ Start Firebase emulators for instrumentation tests
      - name: Start Firebase emulators
        run: |
          if [ -e "firebase.json" ] && jq -e '.emulators' firebase.json >/dev/null; then
            firebase emulators:start --only auth,firestore --project demo-project &
          else
            echo "Firebase emulators not configured, skipping emulator startup..."
          fi

      # 17Ô∏è‚É£ Run instrumentation tests on emulator
      - name: Run instrumentation tests
        timeout-minutes: 25
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          avd-name: github
          force-avd-creation: true
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -skin 1080x2400
          disable-animations: true
          script: ./gradlew connectedCheck --parallel --build-cache

      # 18Ô∏è‚É£ Generate coverage report
      - name: Generate coverage
        run: ./gradlew jacocoTestReport

      # 19Ô∏è‚É£ Fix invalid line numbers in JaCoCo XML report
      - name: Fix JaCoCo XML report
        run: |
          python3 << 'EOF'
          import xml.etree.ElementTree as ET
          import glob
          import os
          xml_files = glob.glob("app/build/reports/jacoco/**/*.xml", recursive=True)
          for xml_file in xml_files:
              try:
                  tree = ET.parse(xml_file)
                  root = tree.getroot()
                  modified = False
                  for sourcefile in root.findall(".//sourcefile"):
                      sourcefile_name = sourcefile.get('name')
                      source_path = None
                      for package in root.findall(".//package"):
                          pkg_name = package.get('name', '').replace('/', '/')
                          potential_path = f"app/src/main/java/{pkg_name}/{sourcefile_name}"
                          if os.path.exists(potential_path):
                              source_path = potential_path
                              break
                      if source_path and os.path.exists(source_path):
                          with open(source_path, 'r') as f:
                              max_line = len(f.readlines())
                          for line in list(sourcefile.findall("line")):
                              line_nr = int(line.get('nr', 0))
                              if line_nr > max_line or line_nr == 65535:
                                  sourcefile.remove(line)
                                  modified = True
                  if modified:
                      tree.write(xml_file, encoding='utf-8', xml_declaration=True)
                      print(f"Fixed invalid lines in {xml_file}")
              except Exception as e:
                  print(f"Warning: Could not process {xml_file}: {e}")
          print("JaCoCo XML report validation complete")
          EOF

      # 20Ô∏è‚É£ Upload coverage report
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: Coverage report
          path: app/build/reports/jacoco/jacocoTestReport

      # 21Ô∏è‚É£ SonarCloud analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        with:
          args: >
            -Dsonar.projectKey=SWENT-team09-2025_joinMe
            -Dsonar.organization=swent-team09-2025
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}
